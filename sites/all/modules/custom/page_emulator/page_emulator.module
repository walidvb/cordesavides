<?php

/**
 * @file carousel.module
 * TODO: Enter file description here.
 */

/**
 * Implements hook_views_query_alter()
 */
function page_emulator_views_query_alter(&$view, &$query) {
  if ($view->name == 'calendar') {
    dpm($view);
    $node_viewed_date = $view->args[0];
    $today = date('Y-m-d');
    dpm($node_viewed_date <= $today);
    $node_is_past = $node_viewed_date <= $today;
    if (isset($query->where[1]) && $node_is_past) {
      if (trim($query->where[1]['conditions'][2]['field']) == "DATE_FORMAT(field_data_field_date.field_date_value, '%Y-%m-%d\T%H') >= :field_data_field_date_field_date_value") {
        // Use '>=' condition instead of '='
        $query->where[1]['conditions'][2]['field'] = "DATE_FORMAT(field_data_field_date.field_date_value, '%Y-%m-%d\T%H') < :field_data_field_date_field_date_value";
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function page_emulator_menu() {
  /*
   *$items['blog'] = array(
   *  'title' => 'blogs',
   *  'page callback' => 'blog_page',
   *  'access arguments' => array('access content'),
   *  'type' => MENU_SUGGESTED_ITEM,
   *);
   */
  $items['archive'] = array(
    'title' => 'Archives',
    'page callback' => '_get_next_node_page',
    'page arguments' => array(true),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    );
  $items['calendar'] = array(
    'title' => t('Calendrier'),
    'page callback' => '_get_next_node_page',
    'page arguments' => array(false),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    );
  return $items;
}

function _get_nearest_node_page($past = false)
{
  if($past)
  {
    $operator = '<=';
    $sort_order = 'DESC';
    drupal_add_js(array('page_emulator' => array('past' => true)), 'setting');
  }
  else
  {
    $operator = '>';
    $sort_order = 'ASC';
    drupal_add_js(array('page_emulator' => array('past' => false)), 'setting');
  }
  $query = new EntityFieldQuery();

  $date = date('Y-m-d');
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'event')
  ->propertyCondition('status', 1)
  ->fieldCondition('field_date', 'value', $date, $operator)
  ->fieldOrderBy('field_date', 'value', $sort_order)
  ->range(0, 1);


  $result = $query->execute();
  $result = $result['node'];
  $nid;
  foreach($result as $node => $content)
  {
    $nid = $content->nid;
  }

  menu_set_active_item('node/'.$nid);
  return menu_execute_active_handler('node/' . $nid, FALSE);
}